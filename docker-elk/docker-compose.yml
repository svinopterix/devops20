version: '1.0'

services:

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    user: root
    init: true
    volumes:
      - certs:/usr/share/elasticsearch/config/certs    
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
      - ./setup/instances.yml:/usr/share/elasticsearch/config/certs/instances.yml:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - es-hot

  es-hot:
    container_name: es-hot
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - data01:/usr/share/elasticsearch/data:Z
      - certs:/usr/share/elasticsearch/config/certs
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: es-hot
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      cluster.name: es-docker-cluster
      discovery.seed_hosts: es-hot,es-warm
      cluster.initial_master_nodes: es-hot,es-warm
      node.roles: master,data_warm
      http.host: 0.0.0.0
      xpack.security.http.ssl.key: certs/es-hot/es-hot.key
      xpack.security.http.ssl.certificate: certs/es-hot/es-hot.crt
      xpack.security.transport.ssl.key: certs/es-hot/es-hot.key
      xpack.security.transport.ssl.certificate: certs/es-hot/es-hot.crt
      xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt      
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536      
    networks:
      - elk
    depends_on:
      - es-warm      

  es-warm:
    container_name: es-warm
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - data02:/usr/share/elasticsearch/data:Z    
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    environment:
      node.name: es-warm
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      cluster.name: es-docker-cluster
      discovery.seed_hosts: es-hot,es-warm
      cluster.initial_master_nodes: es-hot,es-warm
      node.roles: master,data_content,data_hot  
      http.host: 0.0.0.0
      xpack.security.http.ssl.key: certs/es-warm/es-warm.key
      xpack.security.http.ssl.certificate: certs/es-warm/es-warm.crt
      xpack.security.transport.ssl.key: certs/es-warm/es-warm.key
      xpack.security.transport.ssl.certificate: certs/es-warm/es-warm.crt
      xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt         
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536      
    networks:
      - elk     

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5046:5046
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      LS_HEAP_SIZE: 2048m
    networks:
      - elk
    depends_on:
      - es-hot

  kibana:
    container_name: kibana
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs    
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
    networks:
      - elk
    depends_on:
      - es-hot

  filebeat:
    container_name: filebeat
    image: "docker.elastic.co/beats/filebeat:7.2.0"
    privileged: true
    user: root
    command: filebeat -e -strict.perms=false
    volumes:
        - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
        - /var/lib/docker:/var/lib/docker:ro
        - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - elk      
    depends_on:
      - logstash

networks:
  elk:
    driver: bridge

volumes:
  certs:
    driver: local
  data01:
    driver: local
  data02:
    driver: local